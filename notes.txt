Arquivo para apenas anotações

O springMvcApplication é o nosso main.No qual a aplicação será inicializada.Tirando situações em que configurações adicionais avançadas devem ser feitas, não se costuma mexer nesse arquivo.

application.properties: esse é o arquivo de properties que mantém as configurações de conectores ao banco de dadoos e demais configureações globais de projeto.

pom.xml: é o arquivo do Maven que cuida principalmente das dependencias.Se vc habilitou os módulos no Sprint initializr, essas dependencias serão listadas nesse arquivo automaticamente.

Spring Data JPA é o que faz a integração entre o banco de dados e o projeto.E terminando com o Rest Controller( que externaliza um acesso RESTFull).

H2 Database é um banco de dados muito prático para teste, ele sobe localmente, ou seja na sua máquina e possui interface web integrada ao spring Boot.

ddl-auto ele cuida de atualizar o schema do banco de dados conforme as annotations das entities.

Em um projeto Spring Boot, não é necessaŕio configurar um container Tomcat, pois já vem imbutido, isso ocorre por conta do Spring Web já ter imbutido um Tomcat.

Bean são componentes escritos na linguagem java.

Para que serve algumas annotations:
@NotBlank: não poder estar em branco
@Size(max=50):No máximo 50 caracteres
@Min:Não pode ser com valor negativo
@Past:Data tem que ser no passado ou hoje.
@AssetFalse: o valor deve ser falso
@AssertTrue: o valor deve ser True
@DecimalMax: valor deve ser menor ou igual
@DecimalMin:valor deve ser maior ou igual
@Future:a data deve estar no futuro
@Past: a data deve estar no passado ou hj
@Min: valor deve ser maior ou igual
@Max : valor deve ser menor ou igual
@NotNull: o valor não pode ser nulo
@Size: A quantidade de elementos deve estar entre o min e max
@Null o valor deve ser nulo
@Pattern: o valor deve obedecer a expressão regular
@RestController:é a annotation que habilita a externalização dessa classe como um webservice RESTFul
@RequestMapping: habilita uma rota com caminho específico(produto, nesse caso) para todoas as sub-rotas dentro da classe, ou seja, todas as sub-rotas deverão conter um /produto/ na URL.
@GetMapping: habilita uma rota do verbo GET que nada mais é do que obter a listagem de todos os elementos de um repository.
@GetMapping({id}): habilita uma rota do verbo GET que recebe um ID de elemento a ser buscado.
@PathVariable:é uma forma de avisar ao SpringMVC que uma determinada parte da URL virá como se fosse uma variável dentro do método
@ResponseStatus:contém o código HTTP de resposta, varia conforme o tipo de operação realizada.
@PostMapping:habilita uma rota do verbo POST para inserir um elemento
@RequestBody: faz o mapeamento dos dados que virão do request em um Bean.Nesse caso quando os dados são recebidos, eles são colocados dentro de um Bean para uso dentro do método.
@PutMapping({id}): habilita uma rtoa do verbo PUT para atualizar um elemento, passando o ID dele via URL.
@DeleteMapping({id}): habilita uma rota do verbo DELETE para remover um elemento, passando o seu ID via URL.=

Assinaturas referentes ao banco de dados
Select:findAll() ou findById()
INSERT ou UPDATE: save()
DELETE: deleteById()
Com essas referencias ao banco de dados, a criação do respositório se torna mais comuns(ou um DAO- Data Access Object) muito rápida.

A annotation @Autowired cuida de instanciar e injetar o repositório na variável correta, com isso, não há necessidade de nos preocuparmos em criar uma factory ou um singleton para instanciar o repositório.O spring Data cuida disso.

Como funciona um webservice RESTFull:
-O REST(representational State Transfer) é um padrão sucesso do SOAP(Simple Object Access Protocol), utilizado ewm webservices modernos devido a uma série de vantagens arquiteturais,sendo algumas delas:
    -O uso do JSON como formato de conteúdo.
    -A utilização do conceito de verbos como heurística da ação que pode ser realizada em determinada rota.
    -O conceito de webservice leve e simples, retirando a necessidade do uso WSDL(Webservice Description Language) como protocolo de descrição do serviço.

Os webservices que suportam REST também costumam ser chamados de RESTFUl, contendo verbos(ações) possíveis, dentre os quais, quatrão que são muito utilizados:
GET,POST,PUT,DELETE.Esses verbos são análogos as opereações do SQL.

Resource, é uma classe responsável por externalizar as rotas de acesso a um webservice(ou API).

@Controller:informa ao SPring que esta classe possui um controller com mapeamento(rotas)

@RequestMapping: o parametro dentro desta annotation informa que uma sub-rota com o caminho deve ser encaminhada para este controller
@GetMapping/@PostMapping: o parametro dentro desta annotation informa que o endpoint (final da rota) com o respectivo verbo(GET e POST) devem ser encaminhados par ao método anotado.

@PathVariable: é uma forma de avisar ao SPring MVC que uma determinada parte da URL virá como se fosse uma variável dentro do método

Forward:
    -É processdo internamento pelo servidor
    -Quando o processo é finalizado, a URL no browser do usuário não se altera.
    -No caso de ocorrer um reload da página, o browser irá enviar novamente a requisiçãn original

Redirect:
    -É processado em duas etapas, quando o processamento é realizado, o browaser do usuário recebe uma segunda URL, por isso a URL no broswer muda
    -Um realod de página não irá reprocessar a requisição original, visto que já está em uma página diferente.
    -Como consequencia do item anterior, variáveis e atributos da requisição original são perditos em requsições futuras.

Para poder adicionar um redirect, basta colocar "redirect:" no início da String de retorno.

Thymeleaft é basicamente o renderizador e mediador entre a camada web e o sistema.Existem várias funcionalidades embutidas nesse módulo do Spring, dentre delas, as principais são:

-Cuidar da transferencia de parametros entre a página e o sistema.
-Possibilitar o uso de lógica básica de tela para permitir a criação de páginas dinamicas
-Criação de rotas dinamicas e de Beans.

Famosas expressões:
${..}-Variable Expression
*{..}-Selection Expression
#{..}-Message Expression
@{..}-Link(URL)Expression
~{..}Fragment Expression

@DataJpaTest para marcar que este é um tipo de teste de repositório.Um TestEntiryManager é injetado na classe para emular o comportamento de um conector de banco de dados e os métodos que vão conduzr o teste possuem a annotation @Test, na qual o código costuam ser separado em tres partes
GIVE WHEN THEN

GIVE - O QUE PRECISA SER PREPAREADO EM TORMS DE MASSA DE DADOS OU DE CONFIGURAÇÕES DE SISTEMA ANTES DE O TESTE SER CONDUZIDO
WHEN - MOMENTO EM QUE UMA PARTE DO SISTEMA É EXECUTADA E O RETORNO DISSO É ARMAZENADO
THEN - O RETORNO ARMAZENADO ANTERIORMENTE É COMPARADO COM O RESULTADO ESPERADO.